(ns cmm.mips
  "This namespace handles the generation of MIPS code based on the Three Address Codes generated by
   the functions in cmm.three."
  (:require [cmm.errors :as err]
            [cmm.debug :refer [debug-msg]]
            [clojure.string :refer [join]]))

;;; Utility functions
(defn- protected-name
  "Prepends an underscore to a var name to prevent MIPS errors"
  [s]
  (format "_%s" s))

;;; Automatically generated MIPs code
(def print-string-fn
  "A MIPS function to print character arrays."
  (->> ["_print_string:"
        "\tli $v0, 4"
        "\tlw $a0, 0($sp)"
        "\tsyscall"
        "\tjr $ra\n\n"]
       (join \newline)))

(def print-int-fn
  "A mips function to print an integer"
  (->> ["_print_int:"
        "\tli $v0, 1"
        "\tlw $a0, 0 ($sp)"
        "\tsyscall"
        "\tjr $ra\n\n"]
       (join \newline)))

;;; Function generation
(defn- function-prologue
  [function-name required-stack-space]
  (as-> [".text"
         "%s:"
         "\t# Prologue for %s"
         "\tla $sp, -8($sp) # Allocate space for old $fp and $ra"
         "\tsw $fp, 4($sp) # Save old frame pointer"
         "\tsw $ra, 0($sp) # Save old return address"
         "\tla $fp, 0($sp) # Set up the new frame pointer"
         "\tla $sp, %d($sp) # Allocate space for local variables and temps"
         "\n"]
    code
    (join \newline code)
    (format code function-name function-name required-stack-space)))

(defn- function-epilogue
  [function-name]
  (as-> [""
         "%s_epilogue:"
         "\t# Epilogue for %s"
         "\tla $sp, 0($fp)"
         "\tlw $ra, 0($sp)"
         "\tlw $fp, 4($sp)"
         "\tla $sp, 8($sp)"
         "\tjr $ra\n\n"]
    code
    (join \newline code)
    (format code function-name function-name)))

(defn generate-function
  [function-name required-stack-space code]
  (str
    (function-prologue function-name required-stack-space)
    ; (generate-mips code)
    (function-epilogue function-name)))
